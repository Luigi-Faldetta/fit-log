import React, { useState } from 'react';
import WorkoutModal from '../../components/WorkoutModal';
import { postWorkout, postExercise } from '../../services/apiService';

const Stats = () => {
  const [age, setAge] = useState('');
  const [experienceLevel, setExperienceLevel] = useState('');
  const [goal, setGoal] = useState('');
  const [duration, setDuration] = useState('');
  const [workout, setWorkout] = useState(null);
  const [showModal, setShowModal] = useState(false);

  // Function to generate a workout based on user input
  const generateWorkout = async () => {
    try {
      const response = await fetch(
        'http://localhost:3000/ai/generate-workout',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            age,
            experienceLevel,
            goal,
            duration,
          }),
        }
      );

      const data = await response.json();

      // Assume the API returns a workout in text format
      const generatedWorkout = data.workout;
      console.log(data);

      // Set the workout based on the OpenAI response
      setWorkout({
        name: 'AI-Generated Workout',
        description: 'Workout generated by AI',
        exercises: parseWorkoutText(generatedWorkout), // Parsing function to structure the response
      });

      setShowModal(true); // Show modal with the generated workout
    } catch (error) {
      console.error('Error generating workout:', error);
    }
  };

  // const parseWorkoutText = (text) => {
  //   // Assuming the response is structured in a way we can parse into exercises
  //   // You'll need to adapt this based on the format of the response
  //   const exercises = text.split('\n').map((line) => {
  //     const parts = line.split(':'); // Split the exercise name and details
  //     return {
  //       name: parts[0],
  //       sets: 3, // Placeholder values
  //       reps: 10,
  //       kg: 0,
  //       rest: 60,
  //       notes: parts[1] || 'No details provided',
  //       muscle_group: 'general', // Default or extracted from the OpenAI response
  //       video: '', // Add if applicable
  //     };
  //   });
  //   return exercises;
  // };

  const parseWorkoutText = (text) => {
    // Initialize workout object
    const workout = {
      name: 'AI Generated Workout',
      description: 'Workout generated for general fitness.',
      exercises: [], // Ensure exercises is an array
    };

    // Split lines, trim whitespace, and filter out empty lines
    const lines = text
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line !== '');

    let isExerciseSection = false;

    console.log('Parsed lines:', lines); // Log lines to see what we're processing

    lines.forEach((line) => {
      // Start processing exercises when we pass the warm-up section
      if (
        line.toLowerCase().includes('warm-up') ||
        line.toLowerCase().includes('warm up') ||
        line.toLowerCase().includes('cool-down') ||
        line.toLowerCase().includes('cool down')
      ) {
        isExerciseSection = false; // Skip warm-up section
        console.log('Skipping section...');
        return;
      } else {
        isExerciseSection = true;
      }

      // if (line.includes('Cool down')) {
      //   isExerciseSection = false; // Stop at cool down
      //   console.log('Stopping at Cool-down section...');
      //   return;
      // }

      // Log each line and whether we are in the exercise section
      console.log(
        `Processing line: "${line}", isExerciseSection: ${isExerciseSection}`
      );

      //   // Process exercises when in the exercise section
      //   if (isExerciseSection && line.startsWith('-')) {
      //     // Extract the exercise name (everything after the dash) and default values for sets, reps, etc.
      //     const exerciseName = line.substring(2).trim();

      //     console.log('Extracted exerciseName:', exerciseName);

      //     // Create exercise object and add it to the workout
      //     const exercise = {
      //       name: exerciseName,
      //       sets: 3, // Default value for sets
      //       reps: 12, // Default value for reps
      //       kg: 0, // Default value for weight
      //       video: 'N/A', // Default value for video
      //       notes: '', // Leave notes empty for now
      //     };

      //     console.log('Adding exercise to workout:', exercise);
      //     workout.exercises.push(exercise); // Add exercise to the exercises array
      //   }
      // });

      // Process exercises when in the exercise section
      if (isExerciseSection) {
        // Check if the line starts with a number followed by a dot (e.g., '1.')
        const exerciseMatch = line.match(
          /^(\d+\.)\s*(.+)|^(\d+)\s+(.+)|^-\s+(.+)/
        );
        if (exerciseMatch) {
          // Extract the exercise details
          let exerciseDetails;
          if (exerciseMatch[2]) {
            // Matched '1. Exercise'
            exerciseDetails = exerciseMatch[2];
          } else if (exerciseMatch[4]) {
            // Matched '1 Exercise'
            exerciseDetails = exerciseMatch[4];
          } else if (exerciseMatch[5]) {
            // Matched '- Exercise'
            exerciseDetails = exerciseMatch[5];
          }

          // Split the exercise name and sets/reps
          const parts = exerciseDetails.split(':');
          const exerciseName = parts[0].trim();

          let sets = 3; // Default value
          let reps = 12; // Default value

          if (parts[1]) {
            // Attempt to extract sets and reps
            const setsRepsMatch = parts[1].match(
              /(\d+)\s*sets\s*of\s*(\d+)\s*reps/
            );
            if (setsRepsMatch) {
              sets = parseInt(setsRepsMatch[1], 10);
              reps = parseInt(setsRepsMatch[2], 10);
            } else {
              // Alternative pattern matching if the above doesn't work
              const setsMatch = parts[1].match(/(\d+)\s*sets/);
              const repsMatch = parts[1].match(/(\d+)\s*reps/);
              if (setsMatch) sets = parseInt(setsMatch[1], 10);
              if (repsMatch) reps = parseInt(repsMatch[1], 10);
            }
          }

          // Create exercise object and add it to the workout
          const exercise = {
            name: exerciseName,
            sets: sets,
            reps: reps,
            kg: 0, // Default value for weight
            video: 'N/A', // Default value for video
            notes: '', // Leave notes empty for now
          };

          workout.exercises.push(exercise); // Add exercise to the exercises array
        }
      }
    });

    // Log final workout object to verify its structure
    console.log('Final workout object:', workout);

    // Make sure the exercises array is still an array before returning
    if (!Array.isArray(workout.exercises)) {
      workout.exercises = [];
    }

    return workout;
  };

  const saveWorkout = async () => {
    try {
      // Step 1: Post the AI-generated workout
      const createdWorkout = await postWorkout({
        name: workout.name,
        description: workout.description,
      });

      // Step 2: Post each exercise separately with the new workout_id
      const workoutId = createdWorkout.workout_id;
      const exercisePromises = workout.exercises.exercises.map((exercise) => {
        console.log('here', exercise);
        return postExercise({
          name: exercise.name,
          description: exercise.notes,
          muscle_group: 'abs',
          weight: exercise.kg,
          sets: exercise.sets,
          reps: exercise.reps,
          rest: 2,
          media_URL: exercise.video,
          workout_id: workoutId, // Link to the created workout
        });
      });

      // Wait for all exercises to be posted
      await Promise.all(exercisePromises);

      console.log('AI-generated workout and exercises saved successfully');
    } catch (error) {
      console.error('Error saving AI-generated workout and exercises:', error);
    }
  };

  const closeModal = () => {
    setShowModal(false);
    console.log(workout);
  };

  const regenerateWorkout = () => {
    generateWorkout();
  };

  return (
    <div>
      <h2>AI Workout Generator</h2>

      {/* Form for user input */}
      <div>
        <label>
          Age:
          <input
            type="number"
            value={age}
            onChange={(e) => setAge(e.target.value)}
          />
        </label>
      </div>

      <div>
        <label>
          Experience Level:
          <select
            value={experienceLevel}
            onChange={(e) => setExperienceLevel(e.target.value)}
          >
            <option value="">Select</option>
            <option value="beginner">Beginner</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
          </select>
        </label>
      </div>

      <div>
        <label>
          Goal:
          <input
            type="text"
            value={goal}
            onChange={(e) => setGoal(e.target.value)}
            placeholder="e.g., muscle growth, fat loss"
          />
        </label>
      </div>

      <div>
        <label>
          Duration (in minutes):
          <input
            type="number"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
          />
        </label>
      </div>

      <button onClick={generateWorkout}>Generate Workout</button>

      {/* Show modal when workout is generated */}
      {showModal && (
        <WorkoutModal
          workout={workout}
          onRegenerate={regenerateWorkout}
          onSave={saveWorkout}
          onClose={closeModal}
        />
      )}
    </div>
  );
};

export default Stats;
